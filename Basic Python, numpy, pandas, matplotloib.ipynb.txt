{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# This is python tutorial"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is our first program in python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"hello\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$a=b+c$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable   Type    Data/Info\n",
      "----------------------------\n",
      "x          int     3\n"
     ]
    }
   ],
   "source": [
    "x = 3\n",
    "%whos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "print(type(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable   Type     Data/Info\n",
      "-----------------------------\n",
      "x          float    5.7\n"
     ]
    }
   ],
   "source": [
    "x = 5.7\n",
    "%whos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "print(type(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable   Type     Data/Info\n",
      "-----------------------------\n",
      "abcd       float    556.33\n",
      "x          float    5.7\n"
     ]
    }
   ],
   "source": [
    "abcd = 556.33\n",
    "%whos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable   Type     Data/Info\n",
      "-----------------------------\n",
      "a          int      3\n",
      "abcd       float    556.33\n",
      "b          int      5\n",
      "c          float    6.0\n",
      "d          float    7.2\n",
      "f          int      -3\n",
      "x          float    5.7\n"
     ]
    }
   ],
   "source": [
    "a,b,c,d,f = 3,5,6.0,7.2,-3\n",
    "%whos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable   Type     Data/Info\n",
      "-----------------------------\n",
      "a          int      3\n",
      "b          int      5\n",
      "c          float    6.0\n",
      "d          float    7.2\n",
      "f          int      -3\n",
      "x          float    5.7\n"
     ]
    }
   ],
   "source": [
    "del abcd\n",
    "%whos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'abcd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-9-ce1394b9d4d9>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mabcd\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'abcd' is not defined"
     ]
    }
   ],
   "source": [
    "print(abcd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'complex'>\n"
     ]
    }
   ],
   "source": [
    "c=2+4j\n",
    "print(type(c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "s = \"hello how are you\"\n",
    "print(type(s))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# operators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable   Type       Data/Info\n",
      "-------------------------------\n",
      "S          str        Hello how r u\n",
      "a          int        3\n",
      "b          int        5\n",
      "c          complex    (2+4j)\n",
      "d          float      7.2\n",
      "f          int        -3\n",
      "s          str        hello how are you\n",
      "x          float      5.7\n"
     ]
    }
   ],
   "source": [
    "%whos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "sum1 = a+b\n",
    "print(sum1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "print(type(sum1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(a+d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "265.30199999999996\n"
     ]
    }
   ],
   "source": [
    "v = ((a+d)**3)/4\n",
    "print(v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Helloword\n"
     ]
    }
   ],
   "source": [
    "s1 = \"Hello\"\n",
    "s2 = \"word\"\n",
    "s= s1+s2\n",
    "print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "10//3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.3333333333333335"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "10/3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variable   Type     Data/Info\n",
      "-----------------------------\n",
      "S          str      Hello how r u\n",
      "a          bool     True\n",
      "b          bool     True\n",
      "c          bool     False\n",
      "d          float    7.2\n",
      "f          int      -3\n",
      "s          str      Helloword\n",
      "s1         str      Hello\n",
      "s2         str      word\n",
      "sum1       int      8\n",
      "v          float    265.30199999999996\n",
      "x          float    5.7\n"
     ]
    }
   ],
   "source": [
    "a = True\n",
    "b = True\n",
    "c = False\n",
    "%whos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "print(a and b)\n",
    "print(a and c)\n",
    "print(c and a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "d = a or c\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "not(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "not((a and b) or (c and d))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Comparision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "print(a<b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "c= 2>3\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'bool'>\n"
     ]
    }
   ],
   "source": [
    "print(type(c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "d = 3==4\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3==3.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 4\n",
    "y = 9\n",
    "z = 8.3\n",
    "r = -3\n",
    "(x<y) and (z<y) or (r==x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(False and False) or True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "print((not(2!=3) and True) or (False and True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Useful function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "print(round(4.556))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "print(round(4.345))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.556\n"
     ]
    }
   ],
   "source": [
    "print(round(4.556389,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.5568\n"
     ]
    }
   ],
   "source": [
    "print(round(4.556789,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 4)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "divmod(34,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 7)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "divmod(34,9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3, 7)\n",
      "<class 'tuple'>\n",
      "7\n"
     ]
    }
   ],
   "source": [
    "g = divmod(34,9)\n",
    "print(g)\n",
    "print(type(g))\n",
    "print(g[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isinstance(3,int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isinstance(3.4, int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isinstance(3.4, float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isinstance(3.4,(int,float))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isinstance(3+3j, (int,float))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isinstance(2+3j, (int,float,str,complex))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "pow(x,y,z) x raise to the power y and remainder by z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pow(2,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2**4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pow(2,4,7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the Number:56\n"
     ]
    }
   ],
   "source": [
    "x = input(\"Enter the Number:\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z= int(x)\n",
    "print(z)\n",
    "type(z)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on built-in function pow in module builtins:\n",
      "\n",
      "pow(base, exp, mod=None)\n",
      "    Equivalent to base**exp with 2 arguments or base**exp % mod with 3 arguments\n",
      "    \n",
      "    Some types, such as ints, are able to use a more efficient algorithm when\n",
      "    invoked using the three argument form.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(pow)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on method raw_input in module ipykernel.kernelbase:\n",
      "\n",
      "raw_input(prompt='') method of ipykernel.ipkernel.IPythonKernel instance\n",
      "    Forward raw_input to frontends\n",
      "    \n",
      "    Raises\n",
      "    ------\n",
      "    StdinNotImplentedError if active frontend doesn't support stdin.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(input)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Control Flow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n",
      "15\n",
      "15\n",
      "I am rishabh is doing program\n"
     ]
    }
   ],
   "source": [
    "a = int(input())\n",
    "b = int(input())\n",
    "if a>b:\n",
    "    print(a)\n",
    "else:\n",
    "    print(b)\n",
    "    \n",
    "print(\"I am rishabh is doing program\")  \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter marks82\n",
      "A++ grade\n"
     ]
    }
   ],
   "source": [
    "a = int(input(\"Enter marks\"))\n",
    "if a>=85:\n",
    "    print(\"A grade\")\n",
    "elif (a < 85) and (a>=80):\n",
    "    print(\"A++ grade\")\n",
    "elif (a < 80) and (a >= 70):\n",
    "    print(\"b grade\")\n",
    "else:\n",
    "    print(\"Below Average\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n",
      "a is greater than 10\n",
      "a is less than 20\n",
      "outside all file\n"
     ]
    }
   ],
   "source": [
    "a = int(input())\n",
    "if a>10:\n",
    "    print(\"a is greater than 10\")\n",
    "    if a>20:\n",
    "        print(\"a is greater than 20\")\n",
    "        if a>30:\n",
    "            print(\"a is greater than 30\")\n",
    "        else:\n",
    "            print(\"a is less than 30\")\n",
    "            \n",
    "    else:\n",
    "        print(\"a is less than 20\")\n",
    "print(\"outside all file\")        \n",
    "    \n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " Single line comment\n",
    "\"\"\"\"\n",
    "user use this for the multicomment\n",
    "\"\"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the real number12.3\n",
      "12\n"
     ]
    }
   ],
   "source": [
    "x = float(input(\"Enter the real number\"))\n",
    "y = round(x)\n",
    "if x>0:\n",
    "    if y>x:\n",
    "        inportion = y-1 #29.6\n",
    "    else:\n",
    "        inportion = y\n",
    "else:\n",
    "    if y>x:\n",
    "        inportion = y+1\n",
    "    else:\n",
    "        inportion = y\n",
    "        \n",
    "print(inportion)        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "1\n",
      "This is iteration: 1\n",
      "4\n",
      "This is iteration: 2\n",
      "9\n",
      "This is iteration: 3\n",
      "loop closed\n"
     ]
    }
   ],
   "source": [
    "n = int(input())\n",
    "i = 1\n",
    "while i < n:\n",
    "    print(i**2)\n",
    "    print(\"This is iteration:\", i)\n",
    "    i+=1  #i = i+1\n",
    "print(\"loop closed\")    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inside else\n",
      "inside else\n",
      "inside else\n",
      "inside else\n",
      "inside else\n",
      "inside else\n",
      "inside else\n",
      "inside else\n",
      "inside if\n",
      "Done\n"
     ]
    }
   ],
   "source": [
    "i = 1\n",
    "while True:\n",
    "    if i%9 == 0:\n",
    "        print(\"inside if\")\n",
    "        break\n",
    "    else:\n",
    "        print(\"inside else\")\n",
    "        i+=1\n",
    "print(\"Done\")        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inside the code\n",
      "inside the code\n",
      "inside the code\n",
      "inside the code\n",
      "inside the code\n",
      "inside the code\n",
      "inside the code\n",
      "inside the code\n",
      "something\n",
      "Done\n"
     ]
    }
   ],
   "source": [
    "i = 1\n",
    "while True:\n",
    "    if i%9 != 0:\n",
    "        print(\"inside the code\")\n",
    "        i+=1\n",
    "        continue\n",
    "    print(\"something\")\n",
    "    break\n",
    "        \n",
    "print(\"Done\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n"
     ]
    }
   ],
   "source": [
    "L = []\n",
    "for i in range(10):\n",
    "    print(i)\n",
    "    L.append(i**2)\n",
    "print(L)    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Else in for loop:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cherry\n",
      "apple\n",
      "4.8\n"
     ]
    }
   ],
   "source": [
    "s = {\"apple\", 4.8, \"cherry\"}\n",
    "i = 0\n",
    "for x in s:\n",
    "    print(x)\n",
    "    i+=1\n",
    "    if i==3:\n",
    "        break\n",
    "    else:\n",
    "        pass        \n",
    "else:\n",
    "    print(\"Loop terminate with succes\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A 10\n",
      "B 14\n",
      "C 18\n"
     ]
    }
   ],
   "source": [
    "D = {\"A\":10, \"B\":14, \"C\":18}\n",
    "for x in D:\n",
    "    print(x, D[x])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hello\n"
     ]
    }
   ],
   "source": [
    "# Function (Doc string)\n",
    "\n",
    "def succesful():\n",
    "    print(\"hello\")\n",
    "succesful()   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is mssg\n",
      "your input is not string\n",
      "23\n"
     ]
    }
   ],
   "source": [
    "def printmsg(msg):\n",
    "    if isinstance(msg,str):\n",
    "        print(msg)\n",
    "    else:\n",
    "        print(\"your input is not string\")\n",
    "printmsg(\"This is mssg\") \n",
    "printmsg(23)\n",
    "printmsg(\"23\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# function(input argument)\n",
    "\n",
    "\n",
    "def mypow(a,b):\n",
    "    c = a**b\n",
    "    return c   #print(c)\n",
    "mypow(2,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A is : 2\n",
      "B is : 3\n",
      "C is : game\n",
      "if i put this function\n",
      "A is : 3\n",
      "B is : 4\n",
      "C is : name\n"
     ]
    }
   ],
   "source": [
    "# Function (order of input argument)\n",
    "\n",
    "def f(a,b,c):\n",
    "    print(\"A is :\",a)\n",
    "    print(\"B is :\",b)\n",
    "    print(\"C is :\",c)\n",
    "f(2,3,\"game\")\n",
    "print(\"if i put this function\")\n",
    "f(a= 3, b = 4, c= \"name\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "vals = 3\n",
    "def mygroup():\n",
    "    print(vals)\n",
    "mygroup()    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 7 something\n"
     ]
    }
   ],
   "source": [
    "# Function(return statement)\n",
    "\n",
    "def r():\n",
    "    a = 5\n",
    "    b = 7\n",
    "    d = \"something\"\n",
    "    return a,b,d\n",
    "x,y,z = r()\n",
    "print(x,y,z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n"
     ]
    }
   ],
   "source": [
    "def myadd(*args):\n",
    "    s = 0\n",
    "    for i in range(len(args)):\n",
    "        s = s + args[i]\n",
    "    return s   \n",
    "print(myadd(2,3,4,5,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "default value\n",
      "4\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "#Default value\n",
    "\n",
    "def ff(L=[1,2]):\n",
    "    for i in L:\n",
    "        print(i)\n",
    "ff()\n",
    "print(\"default value\")\n",
    "L2= [4,9]\n",
    "ff(L2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\"\n",
    "def checkifNotNumeric(*args):\n",
    "    for x in args:\n",
    "        if not(isinstance(x,(int,float))):\n",
    "            return False\n",
    "    return True    \n",
    "        \n",
    "def myadd(*args):\n",
    "    s = 0\n",
    "    for i in range(len(args)):\n",
    "        s = s + args[i]\n",
    "    return s \n",
    "\n",
    "myname = \"python\"\n",
    "\n",
    "\"\"\"\"\n",
    "# we are going to import the function\n",
    "# creat a new python.py file with code and download\n",
    "# save in \"c\" drive as name rishabh_function foler \"ALT\"\n",
    "# import the file as it is\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "sys.path.append('C:/ALT')\n",
    "\n",
    "import rishabh_functions as myself\n",
    "d = myadd(2,3,4,5)\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'python'"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myself.myname"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 1\n"
     ]
    }
   ],
   "source": [
    "def findMin(L):\n",
    "    m = L[0]\n",
    "    idx = 0\n",
    "    i = 0\n",
    "    for x in L:\n",
    "        if x<m:\n",
    "            m = x\n",
    "            idx = i\n",
    "        else:\n",
    "            pass\n",
    "        i+=1\n",
    "    return m,idx\n",
    "\n",
    "a,b = findMin([8,4,9])\n",
    "print(a,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 5, 4, 3]\n"
     ]
    }
   ],
   "source": [
    "# swap the value\n",
    "\n",
    "def swapvals(L,idx1,idx2):\n",
    "    temp = L[idx1]\n",
    "    L[idx1] = L[idx2]\n",
    "    L[idx2] = temp\n",
    "    return L\n",
    "L = [2,3,4,5]\n",
    "L2 = swapvals(L,1,3)\n",
    "print(L2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# String"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "python is a good language its good for data science\n",
      "hellow 12 hellow who are you 5.9\n"
     ]
    }
   ],
   "source": [
    "s = \"python is a good language\"\n",
    "t = \"its good for data science\"\n",
    "\n",
    "v = s+\" \"+t\n",
    "print(v)\n",
    "print(\"hellow\",12, \"hellow\", \"who are you\", 5.9)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The price of this book is: 12\n"
     ]
    }
   ],
   "source": [
    "price = 12\n",
    "s = \"The price of this book\"\n",
    "v = s + ' is: ' + str(price)\n",
    "print(v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is line 1\n",
      "this is line 2\n",
      "this is line 3\n"
     ]
    }
   ],
   "source": [
    "a = \"\"\"this is line 1\n",
    "this is line 2\n",
    "this is line 3\"\"\"\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a lot pf space at the    beginning\n"
     ]
    }
   ],
   "source": [
    "a = \"     a lot pf space at the    beginning      \"\n",
    "b = a.strip() # remove the extra space\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "abc defg ;; sadfa  qf\n",
      "ABC DEFG ;; SADFA  QF\n",
      "ABC deFg **$$**$$ sadfa  QF\n"
     ]
    }
   ],
   "source": [
    "a = \"ABC deFg ;; sadfa  QF\"\n",
    "b = a.lower()  # convert lower value of alphabat\n",
    "c = a.upper()  # convert upper value of alphabat\n",
    "d = a.replace(\";\",\"**$$\") # replace the (; ,) in **$$\n",
    "print(b)\n",
    "print(c)\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['and', 'myname', 'employee', 'function']\n"
     ]
    }
   ],
   "source": [
    "a = \"and;myname;employee;function\"\n",
    "L = a.split(\";\")\n",
    "print(L)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# List, Tuple, Set, Dictionary\n",
    "# Data structure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"Data structure\n",
    "\n",
    "List         orderd      changable             duplicate\n",
    "Tuple        orderd      unchangable           duplicate\n",
    "set          unorderd    addable/removable     no duplicate\n",
    "Dictionary   unorderd    changable             no duplicate\n",
    "\n",
    "\"\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'list'>\n",
      "<class 'tuple'>\n",
      "<class 'set'>\n",
      "<class 'dict'>\n"
     ]
    }
   ],
   "source": [
    "L = [1,3,4,\"name\",3]\n",
    "T = (1,3,5,\"name\",3)\n",
    "S = {1,2,5,\"name\",3}\n",
    "D = {23:\"tower\",'B':43, 'C':\"CCD\"}\n",
    "print(type(L))\n",
    "print(type(T))\n",
    "print(type(S))\n",
    "print(type(D))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "3\n",
      "True\n",
      "tower\n"
     ]
    }
   ],
   "source": [
    "print(L[1])\n",
    "print(T[1])\n",
    "print(3 in S)\n",
    "print(D[23])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3, 4]\n",
      "[3, 'name', 4, 3, 1]\n",
      "(1, 3, 5)\n"
     ]
    }
   ],
   "source": [
    "L = [1,3,4,\"name\",3]\n",
    "T = (1,3,5,\"name\",3)\n",
    "S = {1,2,5,\"name\",3}\n",
    "D = {23:\"tower\",'B':43, 'C':\"CCD\"}\n",
    "\n",
    "print(L[1:3])\n",
    "print(L[::-1])\n",
    "print(T[:3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 4, 'name', 3, 4, 5, 'Add new number']\n",
      "[1, 3, 4, 'name', 3, 6.8]\n",
      "[1, 3, 4, 3, 6.8]\n",
      "[1, 3, 'four point', 3, 6.8]\n",
      "[1, 3, 'second method', 3, 6.8]\n",
      "[3, 'four point', 3, 6.8]\n"
     ]
    }
   ],
   "source": [
    "L = [1,3,4,\"name\",3]\n",
    "\n",
    "L2 = L + [4,5,\"Add new number\"]\n",
    "print(L2)\n",
    "\n",
    "L.append(6.8)\n",
    "print(L)\n",
    "\n",
    "del L[3]\n",
    "print(L)\n",
    "\n",
    "L3 = L\n",
    "L3[2] = \"four point\"\n",
    "print(L3)\n",
    "\n",
    "L4 = L.copy()   # we use this for coply the value of L in L4\n",
    "L4[2] = \"second method\"\n",
    "print(L4)\n",
    "\n",
    "L5 = L[1:5]\n",
    "print(L5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 3, 5, 'name', 3, 'A', 'F', 45)\n"
     ]
    }
   ],
   "source": [
    "T1 = (1,3,5,\"name\",3)\n",
    "T2 = (\"A\", \"F\", 45)\n",
    "T3 = T1+T2\n",
    "print(T3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 5, 23, 'game', 'name'}\n",
      "{1, 2, 3, 5, 23, 'name'}\n"
     ]
    }
   ],
   "source": [
    "s = {1,2,5,\"name\",3}\n",
    "s.update({23,\"game\", 1})\n",
    "print(s)\n",
    "\n",
    "s.remove(\"game\")\n",
    "print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{23: 'tower', 'B': 43, 'C': 'CCD', 'new key': 'Rishabh'}\n",
      "{23: 'tower', 'B': 43, 'new key': 'Rishabh'}\n",
      "{23: 'tower', 'B': 43, 'new key': 'Rishabh', 'y': 'YY', 'z': 10}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "dict_items([(23, 'tower'), ('B', 43), ('new key', 'Rishabh'), ('y', 'YY'), ('z', 10)])"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D = {23:\"tower\",'B':43, 'C':\"CCD\"}\n",
    "D[\"new key\"] = \"Rishabh\"\n",
    "print(D)\n",
    "\n",
    "del D['C']\n",
    "print(D)\n",
    "\n",
    "D2 = {\"y\": \"YY\", \"z\": 10}\n",
    "D.update(D2)\n",
    "print(D)\n",
    "\n",
    "D.items()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Numpy *****"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "why numpy??\n",
    "quick answer: Numpy is Faster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 4]\n",
      "<class 'numpy.ndarray'>\n",
      "[2 3 5]\n",
      "<class 'numpy.ndarray'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "dtype('int32')"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "a = np.array([1,2,3,4])\n",
    "b = np.array((2,3,5))\n",
    "print(a)\n",
    "print(type(a))\n",
    "print(b)\n",
    "print(type(b))\n",
    "a.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('float32')"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.array([1,2,3,4], dtype = 'i')\n",
    "b = np.array((2,3,5), dtype = 'f')\n",
    "b.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "int32\n",
      "2\n",
      "(2, 3)\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.array([ [1,2,3],[5,6,7]])\n",
    "print(a.dtype) # it shows the type od array\n",
    "print(a.ndim)  # we get dimention od matrix 2D, 3D\n",
    "print(a.shape) # it show the number of row and coloum\n",
    "print(a.size)  # show entire size of block"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = np.array([ [1,2,8],[5,9,7]])\n",
    "a[0,2]   # we get what is number of 3rd place "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "arr1 = np.array([ [1,2,3],[2,4,6]])\n",
    "print(arr1.ndim)\n",
    "arr1[1,2]  # we get the matrix value,1st number  is shows the matrix number 2nd is place value that numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "<class 'numpy.ndarray'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "-8"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "arr2 = np.array([ [[1,2,3],[2,4,6],[-1,4,-6]], [[1,4,-8],[3,6,8],[3,4,2]] ])\n",
    "print(arr2.ndim) \n",
    "print(type(arr2))\n",
    "arr2[1,0,2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "arr2 = np.array([ [[1,2,3],[2,4,6],[-1,4,-6]], [[1,4,-8],[3,6,8],[3,4,2]] ])\n",
    "arr2.shape[2]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = np.array([2])\n",
    "A.ndim"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Numpy(np.arrange,reshape,random)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14]\n",
      "[ 1  3  5  7  9 11 13 15]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "arr = np.arange(1,15)\n",
    "print(arr)\n",
    "arr1 = np.arange(1,16,2)\n",
    "print(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
     ]
    }
   ],
   "source": [
    "print(list(range(10)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.randint(1,20)  # this function gives random value b/w the mention value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.2003073  0.61673107 0.50168389]\n",
      " [0.79814918 0.7575494  0.71375944]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C = np.random.rand(2,3)\n",
    "print(C)\n",
    "C.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D = np.random.rand(2,3,4,2)\n",
    "D.ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3 4 5 6 7 8 9]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "A = np.arange(30)\n",
    "b = A[3:10]\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1200     4     5     6     7     8     9]\n",
      "[    0     1     2 -1200     4     5     6     7     8     9    10    11\n",
      "    12    13    14    15    16    17    18    19    20    21    22    23\n",
      "    24    25    26    27    28    29]\n"
     ]
    }
   ],
   "source": [
    "b[0] = -1200\n",
    "print(b)\n",
    "print(A)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  5, 10, 15, 20, 25])"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A[::5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([29, 24, 19, 14,  9,  4])"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A[::-5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([   29,    28,    27,    26,    25,    24,    23,    22,    21,\n",
       "          20,    19,    18,    17,    16,    15,    14,    13,    12,\n",
       "          11,    10,     9,     8,     7,     6,     5,     4, -1200,\n",
       "           2,     1,     0])"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A[::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "B = (A==-1200)*np.arange(A.size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[    0     1     2 -1200     4     5     6     7     8     9    10    11\n",
      "    12    13    14    15    16    17    18    19    20    21    22    23\n",
      "    24    25    26    27    28    29]\n"
     ]
    }
   ],
   "source": [
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "idx = np.argwhere(A==-1200)[0][0] # find the index that my 1200 value is where located in list\n",
    "print(idx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  9  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
      " 24 25 26 27 28 29]\n"
     ]
    }
   ],
   "source": [
    "A[idx] = 9\n",
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.  8.  1.  2.]\n",
      " [ 5.  6.  9. 10.]\n",
      " [ 1.  3.  0.  4.]\n",
      " [ 7.  1.  9.  3.]\n",
      " [ 7.  2.  7.  5.]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "A = np.round(10*np.random.rand(5,4))\n",
    "print(A)                               \n",
    "                               "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.0\n",
      "4.0\n",
      "[ 5.  6.  9. 10.]\n",
      "[8. 6. 3. 1. 2.]\n"
     ]
    }
   ],
   "source": [
    "print(A[1,2])\n",
    "print(A[2,3])\n",
    "print(A[1,:]) \n",
    "print(A[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 9. 10.]\n",
      " [ 0.  4.]]\n"
     ]
    }
   ],
   "source": [
    "print(A[1:3,2:4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.  5.  1.  7.  7.]\n",
      " [ 8.  6.  3.  1.  2.]\n",
      " [ 1.  9.  0.  9.  7.]\n",
      " [ 2. 10.  4.  3.  5.]]\n"
     ]
    }
   ],
   "source": [
    "print(A.T) # This is transpose of A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.  1.  0.  2.]\n",
      " [ 1.  2.  1.  3.]\n",
      " [ 5.  3.  7.  4.]\n",
      " [ 7.  6.  9.  5.]\n",
      " [ 7.  8.  9. 10.]]\n"
     ]
    }
   ],
   "source": [
    "A.sort(axis=0) # every column sort individually (Lower to upper value)\n",
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.  1.  1.  2.]\n",
      " [ 1.  1.  2.  3.]\n",
      " [ 3.  4.  5.  7.]\n",
      " [ 5.  6.  7.  9.]\n",
      " [ 7.  8.  9. 10.]]\n"
     ]
    }
   ],
   "source": [
    "A.sort(axis=1) # every Row sort individually (Lower to upper value)\n",
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3 5 7]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "A = np.arange(100)\n",
    "B = A[[3,5,7]]\n",
    "print(B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-4  5  7]\n"
     ]
    }
   ],
   "source": [
    "B[0] = -4\n",
    "print(B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
      " 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39]\n"
     ]
    }
   ],
   "source": [
    "B = A[A<40]\n",
    "print(B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[31 32 33 34 35 36 37 38 39]\n"
     ]
    }
   ],
   "source": [
    "B = A[(A<40) & (A>30)]\n",
    "print(B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "# &, and\n",
    "# /, or\n",
    "# ~, not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[8. 5. 9.]\n",
      " [1. 2. 8.]]\n"
     ]
    }
   ],
   "source": [
    "#Numpy(Broadcasting)\n",
    "A = np.round(10*np.random.rand(2,3))\n",
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[11.  8. 12.]\n",
      " [ 4.  5. 11.]]\n"
     ]
    }
   ],
   "source": [
    "print(A+3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[8., 5., 9.],\n",
       "       [2., 3., 9.]])"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A+(np.arange(2).reshape(2,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2. 4. 7.]\n",
      " [7. 5. 2.]]\n",
      "[[6. 5.]\n",
      " [7. 3.]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "A = np.round(10*np.random.rand(2,3))\n",
    "B = np.round(10*np.random.rand(2,2))\n",
    "print(A)\n",
    "print(B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2. 4. 7. 6. 5.]\n",
      " [7. 5. 2. 7. 3.]]\n"
     ]
    }
   ],
   "source": [
    "C = np.hstack((A,B))\n",
    "print(C)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6 2 8 9 1 4 3 0 7 5]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "A = np.random.permutation(np.arange(10))\n",
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4 5 6 7 8 9]\n"
     ]
    }
   ],
   "source": [
    "A.sort()  # sort assending order\n",
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sort(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[9 8 7 6 5 4 3 2 1 0]\n"
     ]
    }
   ],
   "source": [
    "D = A[::-1]   # sort decending order\n",
    "print(D)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['13er' 'abc,how' 'captal' 'u766']\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "A = np.array([\"abc,how\",\"u766\",\"13er\",\"captal\"])\n",
    "A.sort()\n",
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7.86 ms ± 789 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n",
      "36.1 µs ± 2.65 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n"
     ]
    }
   ],
   "source": [
    "B = np.random.rand(10000)\n",
    "%timeit sum(B)\n",
    "%timeit np.sum(B)  #B.sum()  universal function take very less time for run:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pandas***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.2.4\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "print(pd.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.series.Series'>\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "A = pd.Series([2,3,4,5],index=['a','b','c','d'])\n",
    "print(type(A))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 3, 4, 5], dtype=int64)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(A.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['a', 'b', 'c', 'd'], dtype='object')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A['a']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a    2\n",
       "b    3\n",
       "c    4\n",
       "dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A['a':'c']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4.  7.  2.5 8. ]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "grade_dict = {'A':4, 'B':7, 'C':2.5, 'D':8}\n",
    "grads = pd.Series(grade_dict)\n",
    "print(grads.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "A    4.0\n",
       "B    7.0\n",
       "C    2.5\n",
       "D    8.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grads"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A    85\n",
      "B    75\n",
      "C    65\n",
      "D    55\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "marks_dict = {'A':85, 'B':75, 'C':65, 'D':55}\n",
    "marks = pd.Series(marks_dict)\n",
    "print(marks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "85"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "marks['A']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "A    85\n",
       "B    75\n",
       "dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "marks[0:2]   # this is slicing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "D = pd.DataFrame({'marks':marks,'Grade':grads})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>marks</th>\n",
       "      <th>Grade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>85</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>75</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>65</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>55</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   marks  Grade\n",
       "A     85    4.0\n",
       "B     75    7.0\n",
       "C     65    2.5\n",
       "D     55    8.0"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>marks</th>\n",
       "      <td>85.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>55.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Grade</th>\n",
       "      <td>4.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          A     B     C     D\n",
       "marks  85.0  75.0  65.0  55.0\n",
       "Grade   4.0   7.0   2.5   8.0"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D.T  #transpose the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[85. ,  4. ],\n",
       "       [75. ,  7. ],\n",
       "       [65. ,  2.5],\n",
       "       [55. ,  8. ]])"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D.values   # acces  the value of D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "65.0"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D.values[2,0]  # get values row num 3 and column num 1 [2,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['marks', 'Grade'], dtype='object')"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D.columns   # what are the columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['A', 'B', 'C', 'D'], dtype='object')"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D.index    # what are the index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>marks</th>\n",
       "      <th>Grade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>85</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>75</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>65</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>55</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   marks  Grade\n",
       "A     85    4.0\n",
       "B     75    7.0\n",
       "C     65    2.5\n",
       "D     55    8.0"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "D['ScaledMarks'] = 100*(D['marks']/90)  # Add column & get% values of marks value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>marks</th>\n",
       "      <th>Grade</th>\n",
       "      <th>ScaledMarks</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>85</td>\n",
       "      <td>4.0</td>\n",
       "      <td>94.444444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>75</td>\n",
       "      <td>7.0</td>\n",
       "      <td>83.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>65</td>\n",
       "      <td>2.5</td>\n",
       "      <td>72.222222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>55</td>\n",
       "      <td>8.0</td>\n",
       "      <td>61.111111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   marks  Grade  ScaledMarks\n",
       "A     85    4.0    94.444444\n",
       "B     75    7.0    83.333333\n",
       "C     65    2.5    72.222222\n",
       "D     55    8.0    61.111111"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "del D['ScaledMarks'] # delete the columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>marks</th>\n",
       "      <th>Grade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>85</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>75</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>65</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>55</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   marks  Grade\n",
       "A     85    4.0\n",
       "B     75    7.0\n",
       "C     65    2.5\n",
       "D     55    8.0"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   marks  Grade\n",
      "A     85    4.0\n",
      "B     75    7.0\n"
     ]
    }
   ],
   "source": [
    "G = D[D['marks']>70]\n",
    "print(G)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pands(Nan),Missing value\n",
    "\n",
    "import pandas as pd\n",
    "A = pd.DataFrame([{'a':1,'b':4},{'b':-3,'C':9}])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-3</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     a  b    C\n",
       "0  1.0  4  NaN\n",
       "1  NaN -3  9.0"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>-3</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     a  b    C\n",
       "0  1.0  4  0.0\n",
       "1  0.0 -3  9.0"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.fillna(0)  # fill the NaN value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data[1] expilicit index, usse 'loc' fun\n",
    "# data[1:3] implicit index, use 'iloc' fun\n",
    "import pandas as pd\n",
    "A = pd.Series(['a','b','c'],index=[1,3,5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'a'"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A[1] #expilicite result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A[1:3] # implicit result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    a\n",
       "3    b\n",
       "dtype: object"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.loc[1:3] # explicit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3    b\n",
       "5    c\n",
       "dtype: object"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.iloc[1:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>marks</th>\n",
       "      <th>Grade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>85</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>75</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>65</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>55</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   marks  Grade\n",
       "A     85    4.0\n",
       "B     75    7.0\n",
       "C     65    2.5\n",
       "D     55    8.0"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "marks    65.0\n",
       "Grade     2.5\n",
       "Name: C, dtype: float64"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D.iloc[2,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>marks</th>\n",
       "      <th>Grade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>D</th>\n",
       "      <td>55</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>C</th>\n",
       "      <td>65</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>75</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>85</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   marks  Grade\n",
       "D     55    8.0\n",
       "C     65    2.5\n",
       "B     75    7.0\n",
       "A     85    4.0"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D.iloc[::-1,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# pandas csv file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.impute import SimpleImputer\n",
    "df = pd.read_excel('D:/Rishu/rishabh_covid19.xlsx')        # read for 'xlsx' file\n",
    "#csvdat = pd.read_csv('D:/Rishu/rishabh_covid19.csv')      #read for 'csv' file\n",
    "#txtdata = pd.read_table('D:/Rishu/rishabh_covid19.txt')   # read for'txt file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S.N</th>\n",
       "      <th>Name</th>\n",
       "      <th>Date</th>\n",
       "      <th>R.s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Saurabh</td>\n",
       "      <td>21/5/21</td>\n",
       "      <td>562.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Rohit</td>\n",
       "      <td>21/5/22</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Saswat</td>\n",
       "      <td>21/5/23</td>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>sonu</td>\n",
       "      <td>21/5/24</td>\n",
       "      <td>212.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>sanskar</td>\n",
       "      <td>21/5/25</td>\n",
       "      <td>556.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   S.N     Name     Date    R.s\n",
       "0    1  Saurabh  21/5/21  562.0\n",
       "1    2    Rohit  21/5/22    NaN\n",
       "2    3   Saswat  21/5/23   52.0\n",
       "3    4     sonu  21/5/24  212.0\n",
       "4    5  sanskar  21/5/25  556.0"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)  # give only 5 row of table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])   # Date formating"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S.N</th>\n",
       "      <th>Name</th>\n",
       "      <th>Date</th>\n",
       "      <th>R.s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Saurabh</td>\n",
       "      <td>2021-05-21</td>\n",
       "      <td>562.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Rohit</td>\n",
       "      <td>2022-05-21</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Saswat</td>\n",
       "      <td>2023-05-21</td>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>sonu</td>\n",
       "      <td>2024-05-21</td>\n",
       "      <td>212.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>sanskar</td>\n",
       "      <td>2025-05-21</td>\n",
       "      <td>556.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   S.N     Name       Date    R.s\n",
       "0    1  Saurabh 2021-05-21  562.0\n",
       "1    2    Rohit 2022-05-21    NaN\n",
       "2    3   Saswat 2023-05-21   52.0\n",
       "3    4     sonu 2024-05-21  212.0\n",
       "4    5  sanskar 2025-05-21  556.0"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S.N</th>\n",
       "      <th>R.s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9.000000</td>\n",
       "      <td>8.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>212.87500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.738613</td>\n",
       "      <td>227.90815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>22.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>45.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>132.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>306.25000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.000000</td>\n",
       "      <td>562.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            S.N        R.s\n",
       "count  9.000000    8.00000\n",
       "mean   5.000000  212.87500\n",
       "std    2.738613  227.90815\n",
       "min    1.000000   22.00000\n",
       "25%    3.000000   45.00000\n",
       "50%    5.000000  132.00000\n",
       "75%    7.000000  306.25000\n",
       "max    9.000000  562.00000"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9 entries, 0 to 8\n",
      "Data columns (total 4 columns):\n",
      " #   Column  Non-Null Count  Dtype         \n",
      "---  ------  --------------  -----         \n",
      " 0   S.N     9 non-null      int64         \n",
      " 1   Name    9 non-null      object        \n",
      " 2   Date    9 non-null      datetime64[ns]\n",
      " 3   R.s     8 non-null      float64       \n",
      "dtypes: datetime64[ns](1), float64(1), int64(1), object(1)\n",
      "memory usage: 416.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "df.info()  # give information of table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.fillna('NA')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9 entries, 0 to 8\n",
      "Data columns (total 4 columns):\n",
      " #   Column  Non-Null Count  Dtype         \n",
      "---  ------  --------------  -----         \n",
      " 0   S.N     9 non-null      int64         \n",
      " 1   Name    9 non-null      object        \n",
      " 2   Date    9 non-null      datetime64[ns]\n",
      " 3   R.s     9 non-null      object        \n",
      "dtypes: datetime64[ns](1), int64(1), object(2)\n",
      "memory usage: 416.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S.N</th>\n",
       "      <th>Name</th>\n",
       "      <th>Date</th>\n",
       "      <th>R.s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Saurabh</td>\n",
       "      <td>2021-05-21</td>\n",
       "      <td>562.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Rohit</td>\n",
       "      <td>2022-05-21</td>\n",
       "      <td>NA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Saswat</td>\n",
       "      <td>2023-05-21</td>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>sonu</td>\n",
       "      <td>2024-05-21</td>\n",
       "      <td>212.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>sanskar</td>\n",
       "      <td>2025-05-21</td>\n",
       "      <td>556.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   S.N     Name       Date    R.s\n",
       "0    1  Saurabh 2021-05-21  562.0\n",
       "1    2    Rohit 2022-05-21     NA\n",
       "2    3   Saswat 2023-05-21   52.0\n",
       "3    4     sonu 2024-05-21  212.0\n",
       "4    5  sanskar 2025-05-21  556.0"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df.groupby('Name')[['Date','R.s']].sum().reset_index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.reset_index of            R.s\n",
       "Name          \n",
       "Rohit       NA\n",
       "Saswat    52.0\n",
       "Saurabh  562.0\n",
       "harry    223.0\n",
       "jeetu     24.0\n",
       "mahesh    22.0\n",
       "nanhe     52.0\n",
       "sanskar  556.0\n",
       "sonu     212.0>"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Matplotlip****"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x17642b41d90>]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(0,10,100)\n",
    "y = np.sin(x)\n",
    "plt.plot(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x17642ca7940>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x17642d0a3a0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD4CAYAAAD8Zh1EAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAR7UlEQVR4nO3db4wd11nH8e+D64iVWliEF0jWDjaSaxRq2pQlKViCICh2ApKDVYm0qBURkmXUIHgT1UWiFeKFjSL+qmktq0SlEqpVqcGYxMVCmNIXVVtv6rSpE1yZVG12XSmbtm5payl1eHix193N5u7eueu5OzPnfj/SKjszZ/eeydn7u8dnZs6JzESS1H0/1HQFJEn1MNAlqRAGuiQVwkCXpEIY6JJUiFc19cJbtmzJ7du3N/XyktRJTzzxxAuZOdXvWGOBvn37dmZnZ5t6eUnqpIj4ymrHHHKRpEIY6JJUCANdkgphoEtSIQx0SSrEwLtcIuIR4LeB5zPzdX2OB/B3wD3A94Dfz8zP1V1RqSknz8/z0JmLXL5ylVsmJ3hw7y7uvX163eWkUanSQ/8QsG+N43cDO3tfB4EP3Hi1pHY4eX6edz/6FPNXrpLA/JWrvPvRpzh5fn5d5aRRGhjomflJ4BtrFNkPfDgXfRqYjIib66qgNAonz8+z5+hZdhx+nD1Hz64avA+ducjV77/0sn1Xv/8SD525uK5yw76+NIw6HiyaBp5btj3X2/e1lQUj4iCLvXhuvfXWGl5aGt713vT1AL7emwZeMURy+crVvr9j5f6q5YZ9fWkYdVwUjT77+q6akZnHM3MmM2empvo+uSqN3DC96VsmJ/r+jpX7q5Yb9vWlYdQR6HPAtmXbW4HLNfxeaSSG6U0/uHcXE5s3vWzfxOZNPLh317rKDfv60jDqGHI5BTwQESeAO4FvZeYrhluktrhlcoL5PuHZrzd9fQhk0N0rVcsN+/reOaNhVLlt8SPAXcCWiJgD3gtsBsjMY8BpFm9ZvMTibYv3j6qy0iBVAvDBvbteNoYNq/emYTGsq4Ro1XJVX9+xdg1rYKBn5lsHHE/gnbXVSFqnqgE4TG96FKq+/lpj7Qa6+mls+lypbsMEYNXe9KhUeX3H2jUsH/1XMUoLwGHunJHAQFdBSgvAYe6ckcBAV0FKC8B7b5/myIHdTE9OEMD05ARHDuxedajGp0/lGLpar+qte01f7ByFqmP93hEjMNDVcsMGVdMXO5viHTECh1zUcj4mX01pF4S1Pga6Ws2gqqa0C8JaHwNdrWZQVVPaBWGtj4GuVjOoqhn2jhiVyYuiarUS71wZlXG9IKwlBrpaz6CqlzM4lstAV2MMlo3n/eplcwxdjXBR5WZ4G2jZDHQ1wmBphreBls1AVyMMlmZ4G2jZDHQ1wmBphreBls1AVyMMlmZ4v3rZvMtFjfD+8uZ4G2i5DHQ1xmCR6mWgS1qVzwp0i4GuWhkA5fAhpO7xoqhq48NCZfFZge4x0FUbA6AsPivQPQa6amMAlMVnBbrHQFdtDICy+KxA9xjoqo0BUBYfQuoe73JRbXxYqDw+K9AtBrpqZQBIzXHIRZIKUSnQI2JfRFyMiEsRcbjP8R+NiH+NiM9HxIWIuL/+qkqS1jIw0CNiE/AwcDdwG/DWiLhtRbF3Ak9n5uuBu4C/ioibaq6rJGkNVcbQ7wAuZeazABFxAtgPPL2sTAKviYgAXg18A7hWc10ltZRTPrRDlUCfBp5btj0H3LmizPuAU8Bl4DXA72bm/9VSQ7WCb1itxjlf2qPKGHr02ZcrtvcCTwK3AG8A3hcRP/KKXxRxMCJmI2J2YWFhyKqqKc7RorU45UN7VAn0OWDbsu2tLPbEl7sfeDQXXQK+DPzsyl+UmcczcyYzZ6amptZbZ20w37Bai1M+tEeVQD8H7IyIHb0LnfexOLyy3FeBXweIiJ8EdgHP1llRNcc3rNbilA/tMTDQM/Ma8ABwBngG+GhmXoiIQxFxqFfsL4BfjoingP8A3pWZL4yq0tpYvmG1Fqd8aI9KT4pm5mng9Ip9x5Z9fxn4zXqrprZ4cO+ul130At+wWuKUD+3ho/8ayDesBnHKh3Yw0FWJb1ip/ZzLRZIKYaBLUiEMdEkqhGPokjaU00iMjoEuacM478toGehjzJ6SNtpa00j4t3fjDPQxZU9JTXAaidHyouiYcsItNcFpJEbLQB9T9pTUBOd9GS0DfUzZU1IT7r19miMHdjM9OUEA05MTHDmw22G+mjiGPqaccEtNcRqJ0THQx5QTbknlMdDHmD0lqSyOoUtSIQx0SSqEgS5JhTDQJakQBrokFcK7XCS1kpPHDc9AL5BvBHWdk8etj0Muhbn+Rpi/cpVk6Y1w8vx801WTKnPyuPUx0AvjG0ElcPK49THQC+MbQSVw8rj1MdAL4xtBJXCa3fUx0AvjG0ElcJrd9fEul8I4i6JK4eRxwzPQC+QbQRpPDrlIUiEMdEkqRKVAj4h9EXExIi5FxOFVytwVEU9GxIWI+K96qylJGmTgGHpEbAIeBt4MzAHnIuJUZj69rMwk8H5gX2Z+NSJ+YkT1lSStokoP/Q7gUmY+m5kvAieA/SvKvA14NDO/CpCZz9dbTUnSIFUCfRp4btn2XG/fcq8FfiwiPhERT0TEO/r9oog4GBGzETG7sLCwvhpLkvqqEujRZ1+u2H4V8AvAbwF7gT+LiNe+4ocyj2fmTGbOTE1NDV1ZSdLqqtyHPgdsW7a9Fbjcp8wLmfld4LsR8Ung9cCXaqmlJK3BKaMXVQn0c8DOiNgBzAP3sThmvty/AO+LiFcBNwF3An9TZ0XHnX+wUn/Onb5k4JBLZl4DHgDOAM8AH83MCxFxKCIO9co8A/wb8AXgs8AHM/OLo6v2eHGOc2l1Thm9pNKj/5l5Gji9Yt+xFdsPAQ/VVzVdt9Yf7Lj1QKSVnDJ6iU+KdoB/sNLqnDJ6iYHeAf7BSqtzyuglBnoH+Acrrc6505c4fW4HOMe5tDanjF5koHeEf7CSBnHIRZIKYaBLUiEMdEkqhIEuSYUw0CWpEAa6JBXCQJekQngfuqSxUfo01Aa6pLEwDvOmG+gNK73HILXFOExDbaA3aBx6DFJbjMM01F4UbZArrUgbZxymoTbQGzQOPQapLcZhGmoDvUHj0GOQ2mIc5k13DL1BD+7d9bIxdCivxyC1SenTUBvoDXLhCkl1MtAbVnqPQdLGcQxdkgphoEtSIQx0SSqEgS5JhTDQJakQBrokFcJAl6RCGOiSVAgfLJKkPrq4VkGlHnpE7IuIixFxKSIOr1HuFyPipYh4S31VlKSNdX2tgvkrV0mW1io4eX6+6aqtaWCgR8Qm4GHgbuA24K0Rcdsq5f4SOFN3Jbvm5Pl59hw9y47Dj7Pn6NnW/xFIermurlVQpYd+B3ApM5/NzBeBE8D+PuX+CPgY8HyN9eucrn6yS1rS1bUKqgT6NPDcsu253r4fiIhp4HeAY2v9oog4GBGzETG7sLAwbF07oauf7JKWdHWtgiqBHn325YrtvwXelZkv9Sm79EOZxzNzJjNnpqamKlaxW7r6yS5pSVdXN6pyl8scsG3Z9lbg8ooyM8CJiADYAtwTEdcy82QdleySWyYnmO8T3m3/ZJe0pKtrFVQJ9HPAzojYAcwD9wFvW14gM3dc/z4iPgQ8No5hDq5CJJWii2sVDAz0zLwWEQ+wePfKJuCRzLwQEYd6x9ccNx83Xf1kl9R9kblyOHxjzMzM5OzsbCOvLUldFRFPZOZMv2M++i9JhTDQJakQBrokFcJAl6RCGOiSVAgDXZIKYaBLUiEMdEkqhIEuSYVwCTpJugFtWqrOQJekdbq+oM31yfiuL2gDNBLqBvoQ2vRJLKl5ay1oY6C3WNs+iSU1r20L2nhRtCKXlpO0UtuWqjPQK2rbJ7Gk5rVtqToDvaK2fRJLat69t09z5MBupicnCGB6coIjB3Z7l0vbubScpH7atFSdgV6RS8tJajsDfQht+iSWpJUcQ5ekQhjoklQIA12SCmGgS1IhDHRJKoSBLkmFMNAlqRAGuiQVwkCXpEL4pKgkbZBRL5JjoEvSBtiIRXIqDblExL6IuBgRlyLicJ/jvxcRX+h9fSoiXl9L7TbAyfPz7Dl6lh2HH2fP0bOcPD/fdJUkFWgjFskZ2EOPiE3Aw8CbgTngXEScysynlxX7MvCrmfnNiLgbOA7cWVstR8Rl5SRtlI1YJKdKD/0O4FJmPpuZLwIngP3LC2TmpzLzm73NTwNba6vhCLmsnKSNshGL5FQJ9GnguWXbc719q/kD4OP9DkTEwYiYjYjZhYWF6rUcEZeVk7RRNmK5uiqBHn32Zd+CEb/GYqC/q9/xzDyemTOZOTM1NVW9liPisnKSNspGLFdX5S6XOWDbsu2twOWVhSLi54EPAndn5tfrqd5ouaycpI006kVyqgT6OWBnROwA5oH7gLctLxARtwKPAm/PzC/VXssRcVk5SSUZGOiZeS0iHgDOAJuARzLzQkQc6h0/BrwH+HHg/REBcC0zZ0ZX7fq4rJykUkRm3+HwkZuZmcnZ2dlGXluSuioinlitw+xcLpJUCANdkgphoEtSIQx0SSqEgS5JhTDQJakQBrokFcJAl6RCGOiSVAgDXZIKYaBLUiGKXSR61KtrS1LbFBnorhUqaRwVOeTiWqGSxlGRge5aoZLGUZGB7lqhksZRkYG+EatrS1LbFHlR1LVCJY2jIgMdXCtU0vgpcshFksaRgS5JhTDQJakQBrokFcJAl6RCGOiSVAgDXZIKYaBLUiEMdEkqhIEuSYUw0CWpEAa6JBWiUqBHxL6IuBgRlyLicJ/jERF/3zv+hYh4Y/1VXVxabs/Rs+w4/Dh7jp7l5Pn5UbyMJHXSwNkWI2IT8DDwZmAOOBcRpzLz6WXF7gZ29r7uBD7Q+29tXCdUktZWpYd+B3ApM5/NzBeBE8D+FWX2Ax/ORZ8GJiPi5jor6jqhkrS2KoE+DTy3bHuut2/YMkTEwYiYjYjZhYWFoSrqOqGStLYqgR599uU6ypCZxzNzJjNnpqamqtTvB1wnVJLWViXQ54Bty7a3ApfXUeaGuE6oJK2tSqCfA3ZGxI6IuAm4Dzi1oswp4B29u13eBHwrM79WZ0XvvX2aIwd2Mz05QQDTkxMcObDbC6KS1DPwLpfMvBYRDwBngE3AI5l5ISIO9Y4fA04D9wCXgO8B94+isq4TKkmrq7RIdGaeZjG0l+87tuz7BN5Zb9UkScPwSVFJKoSBLkmFMNAlqRAGuiQVIhavZzbwwhELwFfW+eNbgBdqrE7TPJ9283zabdzO56czs++TmY0F+o2IiNnMnGm6HnXxfNrN82k3z2eJQy6SVAgDXZIK0dVAP950BWrm+bSb59Nunk9PJ8fQJUmv1NUeuiRpBQNdkgrR6kBvy+LUdalwPndFxLci4sne13uaqGcVEfFIRDwfEV9c5XjX2mbQ+XSmbQAiYltE/GdEPBMRFyLij/uU6UwbVTyfzrRRRPxwRHw2Ij7fO58/71Nm+PbJzFZ+sThV7/8APwPcBHweuG1FmXuAj7O4YtKbgM80Xe8bPJ+7gMearmvF8/kV4I3AF1c53pm2qXg+nWmbXn1vBt7Y+/41wJc6/v6pcj6daaPe//NX977fDHwGeNONtk+be+itWJy6RlXOpzMy85PAN9Yo0qW2qXI+nZKZX8vMz/W+/1/gGV65zm9n2qji+XRG7//5d3qbm3tfK+9QGbp92hzotS1O3RJV6/pLvX+GfTwifm5jqjYSXWqbqjrZNhGxHbidxV7gcp1sozXOBzrURhGxKSKeBJ4H/j0zb7h9Ki1w0ZDaFqduiSp1/RyL8zR8JyLuAU4CO0ddsRHpUttU0cm2iYhXAx8D/iQzv73ycJ8faXUbDTifTrVRZr4EvCEiJoF/jojXZebyazhDt0+be+itWJy6RgPrmpnfvv7PsFxcJWpzRGzZuCrWqkttM1AX2yYiNrMYfv+UmY/2KdKpNhp0Pl1sI4DMvAJ8Ati34tDQ7dPmQG/F4tQ1Gng+EfFTERG97+9gsX2+vuE1rUeX2magrrVNr67/ADyTmX+9SrHOtFGV8+lSG0XEVK9nTkRMAL8B/PeKYkO3T2uHXLJFi1PXoeL5vAX4w4i4BlwF7sve5e62iYiPsHhXwZaImAPey+KFnc61DVQ6n860Tc8e4O3AU71xWoA/BW6FTrZRlfPpUhvdDPxjRGxi8YPno5n52I3mm4/+S1Ih2jzkIkkagoEuSYUw0CWpEAa6JBXCQJekQhjoklQIA12SCvH/IuiOyRIEqVIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x[:30],y[:30])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x17642d58e50>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x[::10],y[::10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x17642db4e80>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y,color='red')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x17642e19d00>]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,y,color='b')\n",
    "plt.plot(x,np.cos(x),color='g') # add multiple color in graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x17642e7e250>]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,y,':g')     # dotted line\n",
    "# plt.plot(x,y,'-g')   # solid line\n",
    "# plt.plot(x,y,'--g')  # dashed line\n",
    "# plt.plot(x,y,':-,g') # dashdotline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basic END"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
